{"version":3,"sources":["bingo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bingoSheetOptions","B","I","N","G","O","useBingoSheet","React","useState","sheet","setSheet","checked","setChecked","useEffect","saveSheet","window","localStorage","getItem","saveChecks","JSON","parse","recreate","newSheet","Object","keys","reduce","letter","min","max","options","row","length","num","Math","floor","random","includes","push","setItem","stringify","check","key","next","BingoBlock","handleClick","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","onClick","Box","bgcolor","undefined","color","mt","Button","App","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","AppBar","position","Typography","variant","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1084318.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\n\nconst bingoSheetOptions = {\n  B: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  I: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n  N: [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],\n  G: [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n  O: [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75],\n};\n\nfunction randomIntFromInterval(min: number, max: number) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst createBingoSheet = () => {\n  return Object.keys(bingoSheetOptions).reduce((sheet, letter: any) => {\n    //@ts-ignore\n    const options = bingoSheetOptions[letter];\n    let row: number[] = [];\n    while (row.length < 5) {\n      const index = randomIntFromInterval(0, options.length - 1);\n      const num = options[index];\n      if (!row.includes(num)) {\n        row.push(num);\n      }\n    }\n    return { ...sheet, [letter]: row };\n  }, {});\n};\n\ntype Bingo = typeof bingoSheetOptions;\n\nconst useBingoSheet = () => {\n  //@ts-ignore\n  const [sheet, setSheet] = React.useState<Bingo>({});\n  const [checked, setChecked] = React.useState<any>({});\n  const recreate = () => {\n    const newSheet = createBingoSheet();\n    window.localStorage.setItem(\"bingo\", JSON.stringify(newSheet));\n    setChecked({});\n    setSheet(newSheet);\n    window.localStorage.setItem(\"checks\", JSON.stringify({}));\n  };\n\n  const check = (key: string) => {\n    const next = { ...checked, [key]: !checked[key] };\n    setChecked(next);\n    window.localStorage.setItem(\"checks\", JSON.stringify(next));\n  };\n\n  React.useEffect(() => {\n    const saveSheet = window.localStorage.getItem(\"bingo\");\n    const saveChecks = window.localStorage.getItem(\"checks\");\n    if (saveSheet) {\n      setSheet(JSON.parse(saveSheet));\n    }\n    if (saveChecks) {\n      setChecked(JSON.parse(saveChecks));\n    }\n  }, []);\n\n  return {\n    sheet,\n    recreate,\n    checked,\n    check,\n  };\n};\n\nexport const BingoBlock = () => {\n  const { sheet, recreate, checked, check } = useBingoSheet();\n  const handleClick = (key: string) => {\n    check(key);\n  };\n\n  if (sheet && sheet.B && sheet.B[0]) {\n    return (\n      <>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">B</TableCell>\n                <TableCell align=\"center\">I</TableCell>\n                <TableCell align=\"center\">N</TableCell>\n                <TableCell align=\"center\">G</TableCell>\n                <TableCell align=\"center\">O</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell align=\"center\" onClick={() => handleClick(\"b0\")}>\n                  <Box\n                    bgcolor={checked[\"b0\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"b0\"] ? \"white\" : undefined}\n                  >\n                    {sheet.B[0]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"i0\")}>\n                  <Box\n                    bgcolor={checked[\"i0\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"i0\"] ? \"white\" : undefined}\n                  >\n                    {sheet.I[0]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"n0\")}>\n                  <Box\n                    bgcolor={checked[\"n0\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"n0\"] ? \"white\" : undefined}\n                  >\n                    {sheet.N[0]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"g0\")}>\n                  <Box\n                    bgcolor={checked[\"g0\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"g0\"] ? \"white\" : undefined}\n                  >\n                    {sheet.G[0]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"o0\")}>\n                  <Box\n                    bgcolor={checked[\"o0\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"o0\"] ? \"white\" : undefined}\n                  >\n                    {sheet.O[0]}\n                  </Box>\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"center\" onClick={() => handleClick(\"b1\")}>\n                  <Box\n                    bgcolor={checked[\"b1\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"b1\"] ? \"white\" : undefined}\n                  >\n                    {sheet.B[1]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"i1\")}>\n                  <Box\n                    bgcolor={checked[\"i1\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"i1\"] ? \"white\" : undefined}\n                  >\n                    {sheet.I[1]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"n1\")}>\n                  <Box\n                    bgcolor={checked[\"n1\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"n1\"] ? \"white\" : undefined}\n                  >\n                    {sheet.N[1]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"g1\")}>\n                  <Box\n                    bgcolor={checked[\"g1\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"g1\"] ? \"white\" : undefined}\n                  >\n                    {sheet.G[1]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"o1\")}>\n                  <Box\n                    bgcolor={checked[\"o1\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"o1\"] ? \"white\" : undefined}\n                  >\n                    {sheet.O[1]}\n                  </Box>\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"center\" onClick={() => handleClick(\"b2\")}>\n                  <Box\n                    bgcolor={checked[\"b2\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"b2\"] ? \"white\" : undefined}\n                  >\n                    {sheet.B[2]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"i2\")}>\n                  <Box\n                    bgcolor={checked[\"i2\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"i2\"] ? \"white\" : undefined}\n                  >\n                    {sheet.I[2]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\">BINGO</TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"g2\")}>\n                  <Box\n                    bgcolor={checked[\"g2\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"g2\"] ? \"white\" : undefined}\n                  >\n                    {sheet.G[2]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"o2\")}>\n                  <Box\n                    bgcolor={checked[\"o2\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"o2\"] ? \"white\" : undefined}\n                  >\n                    {sheet.O[2]}\n                  </Box>\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"center\" onClick={() => handleClick(\"b3\")}>\n                  <Box\n                    bgcolor={checked[\"b3\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"b3\"] ? \"white\" : undefined}\n                  >\n                    {sheet.B[3]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"i3\")}>\n                  <Box\n                    bgcolor={checked[\"i3\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"i3\"] ? \"white\" : undefined}\n                  >\n                    {sheet.I[3]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"n3\")}>\n                  <Box\n                    bgcolor={checked[\"n3\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"n3\"] ? \"white\" : undefined}\n                  >\n                    {sheet.N[3]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"g3\")}>\n                  <Box\n                    bgcolor={checked[\"g3\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"g3\"] ? \"white\" : undefined}\n                  >\n                    {sheet.G[3]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"o3\")}>\n                  <Box\n                    bgcolor={checked[\"o3\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"o3\"] ? \"white\" : undefined}\n                  >\n                    {sheet.O[3]}\n                  </Box>\n                </TableCell>\n              </TableRow>\n              <TableRow>\n                <TableCell align=\"center\" onClick={() => handleClick(\"b4\")}>\n                  <Box\n                    bgcolor={checked[\"b4\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"b4\"] ? \"white\" : undefined}\n                  >\n                    {sheet.B[4]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"i4\")}>\n                  <Box\n                    bgcolor={checked[\"i4\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"i4\"] ? \"white\" : undefined}\n                  >\n                    {sheet.I[4]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"n4\")}>\n                  <Box\n                    bgcolor={checked[\"n4\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"n4\"] ? \"white\" : undefined}\n                  >\n                    {sheet.N[4]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"g4\")}>\n                  <Box\n                    bgcolor={checked[\"g4\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"g4\"] ? \"white\" : undefined}\n                  >\n                    {sheet.G[4]}\n                  </Box>\n                </TableCell>\n                <TableCell align=\"center\" onClick={() => handleClick(\"o4\")}>\n                  <Box\n                    bgcolor={checked[\"o4\"] ? \"secondary.main\" : undefined}\n                    color={checked[\"o4\"] ? \"white\" : undefined}\n                  >\n                    {sheet.O[4]}\n                  </Box>\n                </TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <Paper>\n          <Box mt={4}>\n            <Button onClick={recreate}>NEUES SPIEL</Button>\n          </Box>\n        </Paper>\n      </>\n    );\n  } else {\n    return <Button onClick={recreate}>neuer Block</Button>;\n  }\n};\n","import React from \"react\";\nimport { WizardPage } from \"./wizard/wizard-game\";\nimport { BingoBlock } from \"./bingo\";\nimport {\n  AppBar,\n  Typography,\n  Container,\n  useMediaQuery,\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n} from \"@material-ui/core\";\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div>\n        <AppBar position=\"static\">\n          <Typography variant=\"h6\">BINGO</Typography>\n        </AppBar>\n        <Container>\n          {/* <WizardPage /> */}\n          <BingoBlock />\n        </Container>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}