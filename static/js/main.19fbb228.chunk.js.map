{"version":3,"sources":["wizard/state.tsx","wizard/wizard-game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["wizardReducer","state","action","type","rounds","scores","players","payload","getScore","index","reduce","playerScore","score","getPlayerCount","Object","keys","getPlayerNames","length","WizardPage","useReducer","dispatch","playerCount","React","useEffect","json","window","localStorage","getItem","JSON","parse","setItem","stringify","Box","mt","Typography","onSubmit","names","addScore","Button","onClick","variant","color","RoundForm","autoComplete","e","preventDefault","map","player","Number","currentTarget","value","reset","TextField","key","label","placeholder","required","fullWidth","margin","name","Game","stats","getPlayers","getAmountOfRounds","cardAmount","leaderBoard","sort","a","b","dealer","getGameStats","Card","CardHeader","title","subheader","CardContent","m","display","justifyContent","Chip","avatar","Avatar","PlayersForm","count","maybePlayers","Array","fill","playerNames","_","target","filter","App","AppBar","position","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19fbb228.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nexport type Players = string[];\nexport type Score = number[];\n\nexport type State = {\n  players: Players;\n  rounds: Score[];\n};\n\nexport type WizardActions =\n  | { type: \"SetPlayers\"; payload: string[] }\n  | { type: \"NextRound\"; scores: number[] }\n  | { type: \"Reset\"; state: State };\n\nexport const wizardReducer = (state: State, action: WizardActions) => {\n  switch (action.type) {\n    case \"NextRound\":\n      return {\n        ...state,\n        rounds: [...state.rounds, action.scores]\n      };\n    case \"SetPlayers\":\n      return {\n        ...state,\n        players: action.payload\n      };\n    case \"Reset\":\n      return { ...action.state };\n    default:\n      return state;\n  }\n};\n\nexport const useWizardState = () => {\n  return useReducer(wizardReducer, {\n    players: [],\n    rounds: []\n  });\n};\n\nconst getAmountOfRounds = (playerCount = 3) => {\n  return 60 / playerCount;\n};\n\nexport const getScore = (index: number, scores: Score[]) => {\n  return scores.reduce((playerScore, score) => {\n    return playerScore + score[index];\n  }, 0);\n};\nexport const getPlayers = (state: State) => state.players;\nexport const getPlayerNames = (state: Players) => Object.keys(state);\nexport const getPlayerCount = (state: Players) => getPlayerNames(state).length;\nexport const getGameStats = (state: State) => {\n  const players = getPlayers(state);\n  const playerCount = getPlayerCount(players);\n  const rounds = getAmountOfRounds(playerCount);\n  const cardAmount = state.rounds.length + 1;\n  const mapPlayerFunction = (player: any, index: number) => ({\n    name: player,\n    score: getScore(index, state.rounds)\n  });\n  const leaderBoard = players\n    .map(mapPlayerFunction)\n    .sort((a, b) => b.score - a.score);\n  const dealerIndex = (cardAmount - 1) % playerCount;\n  const dealer = players[dealerIndex];\n\n  return {\n    rounds,\n    cardAmount,\n    leaderBoard,\n    dealer\n  };\n};\n","import React from \"react\";\n\nimport {\n  Box,\n  Button,\n  Typography,\n  TextField,\n  Card,\n  CardContent,\n  CardHeader,\n  Avatar,\n  Chip\n} from \"@material-ui/core\";\n\nimport {\n  useWizardState,\n  getPlayerCount,\n  getGameStats,\n  State,\n  Players\n} from \"./state\";\n\nconst KEY = \"WIZARD\";\n\nexport const WizardPage = () => {\n  const [state, dispatch] = useWizardState();\n  const playerCount = getPlayerCount(state.players);\n\n  React.useEffect(() => {\n    const json = window.localStorage.getItem(KEY);\n    try {\n      const state = JSON.parse(json || \"\");\n      dispatch({ type: \"Reset\", state });\n    } catch {}\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    window.localStorage.setItem(KEY, JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <>\n      <Box mt={3}>\n        <Typography>WIZARD</Typography>\n      </Box>\n      {playerCount === 0 ? (\n        <PlayersForm\n          onSubmit={names => dispatch({ type: \"SetPlayers\", payload: names })}\n        />\n      ) : (\n        <Game\n          addScore={scores => dispatch({ type: \"NextRound\", scores })}\n          state={state}\n        />\n      )}\n      <Box mt={6}>\n        <Button\n          onClick={() =>\n            dispatch({ type: \"Reset\", state: { players: [], rounds: [] } })\n          }\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          neues spiel\n        </Button>\n      </Box>\n    </>\n  );\n};\n\nconst RoundForm: React.FC<{\n  onSubmit: (scores: number[]) => void;\n  players: Players;\n}> = ({ players, onSubmit }) => {\n  return (\n    <form\n      autoComplete=\"off\"\n      onSubmit={e => {\n        e.preventDefault();\n        const scores: number[] = players.map(player =>\n          Number(e.currentTarget[player].value)\n        );\n        onSubmit(scores);\n        e.currentTarget.reset();\n      }}\n    >\n      <Typography>Punkte:</Typography>\n      {players.map(player => (\n        <TextField\n          key={player}\n          label={player}\n          placeholder=\"Punkte\"\n          required\n          fullWidth\n          margin=\"normal\"\n          type=\"number\"\n          name={player}\n        />\n      ))}\n      <Button variant=\"contained\" type=\"submit\">\n        n√§chste runde\n      </Button>\n    </form>\n  );\n};\n\nconst Game: React.FC<{\n  state: State;\n  addScore: (scores: number[]) => void;\n}> = ({ state, addScore }) => {\n  const stats = getGameStats(state);\n  return (\n    <>\n      <Card>\n        <CardHeader\n          title={`Runde ${stats.cardAmount} von ${stats.rounds}`}\n          subheader={`${stats.cardAmount} Karten werden verteilt Es gibt ${stats.dealer}`}\n        ></CardHeader>\n        <CardContent>\n          <RoundForm onSubmit={addScore} players={state.players} />\n          <Box m={5}>\n            <Typography>Siegertreppchen</Typography>\n            <Box mt={2} display=\"flex\" justifyContent=\"space-between\">\n              {stats.leaderBoard.map((player, index) => (\n                <Chip\n                  color=\"primary\"\n                  label={\n                    <>\n                      {player.name} {player.score}\n                    </>\n                  }\n                  avatar={<Avatar>{index + 1}</Avatar>}\n                />\n              ))}\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nconst PlayersForm: React.FC<{\n  onSubmit: (names: string[]) => void;\n  count?: number;\n}> = ({ onSubmit, count = 6 }) => {\n  const maybePlayers = Array(count).fill(\"\");\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        const playerNames = maybePlayers\n          .map(\n            //@ts-ignore\n            (_, index) => e.target[`playerName${index + 1}`].value\n          )\n          .filter(name => name.length);\n        onSubmit(playerNames);\n      }}\n    >\n      {maybePlayers.map((_, index) => (\n        <TextField\n          required={index < 3}\n          key={index}\n          autoComplete=\"off\"\n          label={`Spieler ${index + 1}`}\n          name={`playerName${index + 1}`}\n          placeholder=\"Name\"\n          margin=\"normal\"\n          type=\"text\"\n          fullWidth\n        />\n      ))}\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        spiel starten\n      </Button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { WizardPage } from \"./wizard/wizard-game\";\nimport { AppBar, Typography, Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h6\">STIFT UND BLOCK</Typography>\n      </AppBar>\n      <Container>\n        <WizardPage />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}