{"version":3,"sources":["wizard/state.tsx","wizard/wizard-game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["wizardReducer","state","action","type","rounds","scores","wants","players","payload","getScore","index","reduce","playerScore","score","getPlayerCount","Object","keys","getPlayerNames","length","WizardPage","useReducer","dispatch","playerCount","React","useEffect","json","window","localStorage","getItem","JSON","parse","setItem","stringify","Box","mt","mb","Typography","onSubmit","names","addScore","addWants","Button","onClick","variant","color","RoundForm","round","autoComplete","e","preventDefault","haves","map","player","Number","currentTarget","value","acc","have","result","Math","abs","reset","scrollTo","alert","display","alignContent","alignItems","key","Avatar","style","marginRight","TextField","label","placeholder","required","fullWidth","margin","name","inputProps","pattern","WantForm","Game","stats","getPlayers","getAmountOfRounds","cardAmount","leaderBoard","sort","a","b","dealer","getGameStats","roundCopy","Card","CardHeader","title","subheader","CardContent","Divider","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","component","scope","marginTop","ExtendedResult","userIndex","PlayersForm","count","maybePlayers","Array","fill","playerNames","_","target","filter","Set","App","AppBar","position","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b49aa129.chunk.js","sourcesContent":["import { useReducer } from \"react\";\n\nexport type Players = string[];\nexport type Score = number[];\n\nexport type State = {\n  players: Players;\n  rounds: Score[];\n  wants: Score[];\n};\n\nexport type WizardActions =\n  | { type: \"SetPlayers\"; payload: string[] }\n  | { type: \"NextRound\"; scores: number[] }\n  | { type: \"SetWants\"; wants: number[] }\n  | { type: \"Reset\"; state: State };\n\nexport const wizardReducer = (state: State, action: WizardActions) => {\n  switch (action.type) {\n    case \"NextRound\":\n      return {\n        ...state,\n        rounds: [...state.rounds, action.scores]\n      };\n    case \"SetWants\":\n      return {\n        ...state,\n        wants: [...state.wants, action.wants]\n      };\n    case \"SetPlayers\":\n      return {\n        ...state,\n        players: action.payload\n      };\n    case \"Reset\":\n      return { ...action.state };\n    default:\n      return state;\n  }\n};\n\nexport const useWizardState = () => {\n  return useReducer(wizardReducer, {\n    players: [],\n    rounds: [],\n    wants: []\n  });\n};\n\nconst getAmountOfRounds = (playerCount = 3) => {\n  return 60 / playerCount;\n};\n\nexport const getScore = (index: number, scores: Score[]) => {\n  return scores.reduce((playerScore, score) => {\n    return playerScore + score[index];\n  }, 0);\n};\nexport const getPlayers = (state: State) => state.players;\nexport const getPlayerNames = (state: Players) => Object.keys(state);\nexport const getPlayerCount = (state: Players) => getPlayerNames(state).length;\nexport const getGameStats = (state: State) => {\n  const players = getPlayers(state);\n  const playerCount = getPlayerCount(players);\n  const rounds = getAmountOfRounds(playerCount);\n  const cardAmount = state.rounds.length + 1;\n  const mapPlayerFunction = (player: any, index: number) => ({\n    name: player,\n    score: getScore(index, state.rounds)\n  });\n  const leaderBoard = players\n    .map(mapPlayerFunction)\n    .sort((a, b) => b.score - a.score);\n  const dealerIndex = (cardAmount - 1) % playerCount;\n  const dealer = players[dealerIndex];\n\n  return {\n    rounds,\n    cardAmount,\n    leaderBoard,\n    dealer\n  };\n};\n","import React from \"react\";\n\nimport {\n  Box,\n  Button,\n  Typography,\n  TextField,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Avatar\n} from \"@material-ui/core\";\n\nimport {\n  useWizardState,\n  getPlayerCount,\n  getGameStats,\n  State,\n  Players\n} from \"./state\";\n\nconst KEY = \"WIZARD\";\n\nexport const WizardPage = () => {\n  const [state, dispatch] = useWizardState();\n  const playerCount = getPlayerCount(state.players);\n\n  React.useEffect(() => {\n    const json = window.localStorage.getItem(KEY);\n    try {\n      const state = JSON.parse(json || \"\");\n      dispatch({ type: \"Reset\", state });\n    } catch {}\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    window.localStorage.setItem(KEY, JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <>\n      <Box mt={3} mb={3}>\n        <Typography>WIZARD</Typography>\n      </Box>\n      {playerCount === 0 ? (\n        <PlayersForm\n          onSubmit={names => dispatch({ type: \"SetPlayers\", payload: names })}\n        />\n      ) : (\n        <Game\n          addScore={scores => dispatch({ type: \"NextRound\", scores })}\n          addWants={wants => dispatch({ type: \"SetWants\", wants })}\n          state={state}\n        />\n      )}\n      {state.players.length > 0 && (\n        <Box mt={6}>\n          <Button\n            onClick={() =>\n              dispatch({\n                type: \"Reset\",\n                state: { players: [], rounds: [], wants: [] }\n              })\n            }\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            neues spiel\n          </Button>\n        </Box>\n      )}\n    </>\n  );\n};\n\nconst RoundForm: React.FC<{\n  onSubmit: (scores: number[]) => void;\n  players: Players;\n  wants: number[];\n  round: number;\n}> = ({ players, onSubmit, wants, round }) => {\n  return (\n    <form\n      autoComplete=\"off\"\n      onSubmit={e => {\n        e.preventDefault();\n        const haves: number[] = players.map(player =>\n          Number(e.currentTarget[player].value)\n        );\n        const validateRounds = haves.reduce((acc, have) => acc + have, 0);\n        if (validateRounds !== round) {\n          alert(\n            \"Oh oh die Anzahl aller Stiche passt nicht zur aktuellen Kartenanzahl :(\"\n          );\n          return;\n        }\n        const scores = haves.map((have, index) => {\n          const want = wants[index];\n          const result = want - have;\n          if (result === 0) {\n            return 20 + have * 10;\n          } else {\n            return Math.abs(10 * result) * -1;\n          }\n        });\n        onSubmit(scores);\n        e.currentTarget.reset();\n        window.scrollTo(0, 0);\n      }}\n    >\n      <Typography>Rundenwertung:</Typography>\n      {players.map((player, index) => (\n        <Box\n          display=\"flex\"\n          alignContent=\"center\"\n          alignItems=\"center\"\n          key={player}\n        >\n          <Avatar style={{ marginRight: \"1rem\" }}>{wants[index]}</Avatar>\n          <TextField\n            variant=\"outlined\"\n            label={`Stiche von ${player}`}\n            placeholder=\"tatsächliche Stiche\"\n            required\n            fullWidth\n            margin=\"normal\"\n            type=\"tel\"\n            name={player}\n            inputProps={{ pattern: \"[0-9]*\" }}\n          />\n        </Box>\n      ))}\n      <Button variant=\"contained\" type=\"submit\">\n        punkte speichern\n      </Button>\n    </form>\n  );\n};\n\nconst WantForm: React.FC<{\n  onSubmit: (wants: number[]) => void;\n  players: Players;\n}> = ({ players, onSubmit }) => {\n  return (\n    <form\n      autoComplete=\"off\"\n      onSubmit={e => {\n        e.preventDefault();\n        const wants: number[] = players.map(player =>\n          Number(e.currentTarget[player].value)\n        );\n        onSubmit(wants);\n        e.currentTarget.reset();\n        window.scrollTo(0, 0);\n      }}\n    >\n      <Typography>Stiche Ansagen:</Typography>\n      {players.map(player => (\n        <TextField\n          variant=\"outlined\"\n          key={player}\n          label={`Ansage von ${player}`}\n          placeholder=\"x stiche\"\n          required\n          fullWidth\n          margin=\"normal\"\n          type=\"tel\"\n          name={player}\n          inputProps={{ pattern: \"[0-9]*\" }}\n        />\n      ))}\n      <Button variant=\"contained\" type=\"submit\">\n        Ansage speichern\n      </Button>\n    </form>\n  );\n};\n\nconst Game: React.FC<{\n  state: State;\n  addScore: (scores: number[]) => void;\n  addWants: (wants: number[]) => void;\n}> = ({ state, addScore, addWants }) => {\n  const stats = getGameStats(state);\n  const roundCopy = `Runde ${stats.cardAmount} von ${stats.rounds}`;\n  const getSubHeaderText = () => {\n    if (stats.cardAmount === 1) {\n      return `${stats.cardAmount} Karte wird verteilt - Es gibt ${stats.dealer}`;\n    } else {\n      return `${stats.cardAmount} Karten werden verteilt - Es gibt ${stats.dealer}`;\n    }\n  };\n  const wants = state.wants[stats.cardAmount - 1];\n  return (\n    <>\n      <Card>\n        <CardHeader\n          title={roundCopy}\n          subheader={getSubHeaderText()}\n        ></CardHeader>\n        <CardContent>\n          {wants ? (\n            <RoundForm\n              round={stats.cardAmount}\n              wants={wants}\n              onSubmit={addScore}\n              players={state.players}\n            />\n          ) : (\n            <WantForm onSubmit={addWants} players={state.players} />\n          )}\n          <Divider style={{ margin: \"2rem 0\" }} />\n          <Typography>Wertung</Typography>\n          <Typography>{roundCopy}</Typography>\n\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Platz</TableCell>\n                  <TableCell align=\"right\">Name</TableCell>\n                  <TableCell align=\"right\">Punkte</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {stats.leaderBoard.map((row, index) => (\n                  <TableRow key={row.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {index + 1}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.name}</TableCell>\n                    <TableCell align=\"right\">{row.score}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </CardContent>\n      </Card>\n\n      <Card style={{ marginTop: \"3rem\" }}>\n        <ExtendedResult state={state} />\n      </Card>\n    </>\n  );\n};\n\nconst ExtendedResult: React.FC<{ state: State }> = ({ state }) => {\n  return (\n    <TableContainer>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            {state.players.map(name => (\n              <TableCell key={`head-${name}`}>{name}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {state.rounds.map((row, index) => (\n            <TableRow key={`row-${index}`}>\n              <TableCell>{index}</TableCell>\n              {state.players.map((name, userIndex) => (\n                <TableCell key={`cell=${index}-${userIndex}`}>\n                  {row[userIndex]} | {state.wants[index][userIndex]}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nconst PlayersForm: React.FC<{\n  onSubmit: (names: string[]) => void;\n  count?: number;\n}> = ({ onSubmit, count = 6 }) => {\n  const maybePlayers = Array(count).fill(\"\");\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        const playerNames = maybePlayers\n          .map(\n            //@ts-ignore\n            (_, index) => e.target[`playerName${index + 1}`].value\n          )\n          .filter(name => name.length);\n        //@ts-ignore\n        const duplicates = [...new Set(playerNames)];\n        if (duplicates.length !== playerNames.length) {\n          alert(\"Jeder spieler sollte einen eindeutigen namen haben ;)\");\n        } else {\n          onSubmit(playerNames);\n        }\n      }}\n    >\n      {maybePlayers.map((_, index) => (\n        <TextField\n          variant=\"outlined\"\n          required={index < 3}\n          key={index}\n          autoComplete=\"off\"\n          label={`Spieler ${index + 1}`}\n          name={`playerName${index + 1}`}\n          placeholder=\"Name\"\n          margin=\"normal\"\n          type=\"text\"\n          fullWidth\n        />\n      ))}\n      <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n        spiel starten\n      </Button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport { WizardPage } from \"./wizard/wizard-game\";\nimport { AppBar, Typography, Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h6\">STIFT UND BLOCK</Typography>\n      </AppBar>\n      <Container>\n        <WizardPage />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}